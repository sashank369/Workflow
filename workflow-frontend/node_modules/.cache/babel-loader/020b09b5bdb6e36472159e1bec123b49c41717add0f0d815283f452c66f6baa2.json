{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sashank Reddy\\\\Desktop\\\\Assigment\\\\workflow-frontend\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport jwtDecode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [usernam, setUsername] = useState(\"\");\n  const [passwor, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:8080/realms/demo-realm/protocol/openid-connect/token\", new URLSearchParams({\n        grant_type: \"password\",\n        client_id: \"django-backend\",\n        username: usernam,\n        password: passwor\n      }), {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      });\n      const token = response.data.access_token;\n      localStorage.setItem(\"token\", token);\n      const decoded = jwtDecode(token);\n      const roles = decoded.realm_access.roles;\n      console.log(roles);\n      if (roles.includes(\"Admin\")) navigate(\"/admin\");else if (roles.includes(\"Employee\")) navigate(\"/employee\");else if (roles.includes(\"HR\") || roles.includes(\"Manager\")) navigate(\"/approver\");else alert(\"No dashboard available for your role.\");\n    } catch (err) {\n      alert(\"Login failed\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-md mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl mb-4 font-bold\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: usernam,\n      onChange: e => setUsername(e.target.value),\n      className: \"block w-full p-2 border mb-3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: passwor,\n      onChange: e => setPassword(e.target.value),\n      className: \"block w-full p-2 border mb-3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      className: \"bg-blue-500 text-white px-4 py-2\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"f+/mTJtsAmYSnkjAchOanHCGUxo=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","axios","useNavigate","jwtDecode","jsxDEV","_jsxDEV","LoginPage","_s","usernam","setUsername","passwor","setPassword","navigate","handleLogin","response","post","URLSearchParams","grant_type","client_id","username","password","headers","token","data","access_token","localStorage","setItem","decoded","roles","realm_access","console","log","includes","alert","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Sashank Reddy/Desktop/Assigment/workflow-frontend/src/pages/LoginPage.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport jwtDecode from \"jwt-decode\";\n\nconst LoginPage = () => {\n  const [usernam, setUsername] = useState(\"\");\n  const [passwor, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post(\n        \"http://localhost:8080/realms/demo-realm/protocol/openid-connect/token\",\n        new URLSearchParams({\n          grant_type: \"password\",\n          client_id: \"django-backend\",\n          username:usernam,\n          password:passwor,\n        }),\n        {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n        }\n      );\n      const token = response.data.access_token;\n      localStorage.setItem(\"token\", token);\n      const decoded = jwtDecode(token);\n      const roles = decoded.realm_access.roles;\n      console.log(roles);\n      if (roles.includes(\"Admin\")) navigate(\"/admin\");\n      else if (roles.includes(\"Employee\")) navigate(\"/employee\");\n      else if (roles.includes(\"HR\") || roles.includes(\"Manager\"))\n        navigate(\"/approver\");\n      else alert(\"No dashboard available for your role.\");\n    } catch (err) {\n      alert(\"Login failed\");\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-md mx-auto\">\n      <h2 className=\"text-2xl mb-4 font-bold\">Login</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Username\"\n        value={usernam}\n        onChange={(e) => setUsername(e.target.value)}\n        className=\"block w-full p-2 border mb-3\"\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={passwor}\n        onChange={(e) => setPassword(e.target.value)}\n        className=\"block w-full p-2 border mb-3\"\n      />\n      <button onClick={handleLogin} className=\"bg-blue-500 text-white px-4 py-2\">\n        Login\n      </button>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACU,OAAO,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAC/B,uEAAuE,EACvE,IAAIC,eAAe,CAAC;QAClBC,UAAU,EAAE,UAAU;QACtBC,SAAS,EAAE,gBAAgB;QAC3BC,QAAQ,EAACX,OAAO;QAChBY,QAAQ,EAACV;MACX,CAAC,CAAC,EACF;QACEW,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MACD,MAAMC,KAAK,GAAGR,QAAQ,CAACS,IAAI,CAACC,YAAY;MACxCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;MACpC,MAAMK,OAAO,GAAGxB,SAAS,CAACmB,KAAK,CAAC;MAChC,MAAMM,KAAK,GAAGD,OAAO,CAACE,YAAY,CAACD,KAAK;MACxCE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MAClB,IAAIA,KAAK,CAACI,QAAQ,CAAC,OAAO,CAAC,EAAEpB,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAC3C,IAAIgB,KAAK,CAACI,QAAQ,CAAC,UAAU,CAAC,EAAEpB,QAAQ,CAAC,WAAW,CAAC,CAAC,KACtD,IAAIgB,KAAK,CAACI,QAAQ,CAAC,IAAI,CAAC,IAAIJ,KAAK,CAACI,QAAQ,CAAC,SAAS,CAAC,EACxDpB,QAAQ,CAAC,WAAW,CAAC,CAAC,KACnBqB,KAAK,CAAC,uCAAuC,CAAC;IACrD,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZD,KAAK,CAAC,cAAc,CAAC;IACvB;EACF,CAAC;EAED,oBACE5B,OAAA;IAAK8B,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnC/B,OAAA;MAAI8B,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClDnC,OAAA;MACEoC,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAEnC,OAAQ;MACfoC,QAAQ,EAAGC,CAAC,IAAKpC,WAAW,CAACoC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC7CR,SAAS,EAAC;IAA8B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eACFnC,OAAA;MACEoC,IAAI,EAAC,UAAU;MACfC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAEjC,OAAQ;MACfkC,QAAQ,EAAGC,CAAC,IAAKlC,WAAW,CAACkC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC7CR,SAAS,EAAC;IAA8B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eACFnC,OAAA;MAAQ0C,OAAO,EAAElC,WAAY;MAACsB,SAAS,EAAC,kCAAkC;MAAAC,QAAA,EAAC;IAE3E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACjC,EAAA,CA1DID,SAAS;EAAA,QAGIJ,WAAW;AAAA;AAAA8C,EAAA,GAHxB1C,SAAS;AA4Df,eAAeA,SAAS;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}